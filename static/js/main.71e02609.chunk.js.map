{"version":3,"sources":["components/search-box/search-box.component.jsx","components/card/card.component.jsx","components/card-list/card-list.component.jsx","App.js","serviceWorker.js","index.js"],"names":["SearchBox","placeholder","handleChange","className","type","onChange","Card","props","src","monster","id","alt","name","email","CardList","monsters","map","key","App","e","setState","searchField","target","value","handleElement","console","log","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qUAEaA,EAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACrB,2BACIC,UAAU,eACVC,KAAK,SACLH,YAAaA,EACbI,SAAUH,KCDLI,G,sBAAO,SAACC,GACpB,OACC,yBAAKJ,UAAU,YACd,yBAAKA,UAAU,QACd,yBAAKA,UAAU,cACd,yBACCA,UAAU,iBACVK,IAAG,8BAAyBD,EAAME,QAAQC,GAAvC,0BACHC,IAAI,aAGN,yBAAKR,UAAU,0BACd,4BAAKI,EAAME,QAAQG,OAEpB,yBAAKT,UAAU,yBACd,2BAAII,EAAME,QAAQI,YCfVC,G,MAAW,SAACP,GACxB,OACC,yBAAKJ,UAAU,YACbI,EAAMQ,SAASC,KAAI,SAACP,GACpB,OAAO,kBAAC,EAAD,CAAMQ,IAAKR,EAAQC,GAAID,QAASA,UCgD5BS,G,kBAhDb,aAAe,IAAD,8BACZ,+CAgBFhB,aAAe,SAACiB,GACd,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAlB1B,EAqBdC,cAAgB,SAACL,GACfM,QAAQC,IAAIP,EAAEG,OAAOC,QApBrB,EAAKI,MAAQ,CACXZ,SAAU,GACVM,YAAa,IAJH,E,iFAWO,IAAD,OAClBO,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAW,EAAKZ,SAAS,CAAEL,SAAUiB,S,+BAWrC,IAAD,EAC2BC,KAAKN,MAA/BZ,EADD,EACCA,SAAUM,EADX,EACWA,YACZa,EAAmBnB,EAASoB,QAAO,SAAC1B,GACxC,OAAOA,EAAQG,KAAKwB,cAAcC,SAAShB,EAAYe,kBAGzD,OACE,yBAAKjC,UAAU,yBACb,wBAAIA,UAAU,qCAAd,mBAGA,yBAAKA,UAAU,mCACb,yBAAKA,UAAU,YACb,kBAAC,EAAD,CAAWF,YAAY,iBACrBC,aAAc+B,KAAK/B,iBAGzB,kBAAC,EAAD,CAAUa,SAAUmB,S,GA5CVI,IAAMC,YCIJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,MAAK,SAAAuB,GACjCA,EAAaC,kB","file":"static/js/main.71e02609.chunk.js","sourcesContent":["import React from 'react';\n\nexport const SearchBox = ({ placeholder, handleChange }) => (\n    <input \n        className=\"form-control\"\n        type=\"search\" \n        placeholder={placeholder}\n        onChange={handleChange}\n    />\n)","import React from 'react';\nimport './card.styles.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'jquery/dist/jquery';\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\n\nexport const Card = (props) => {\n\treturn (\n\t\t<div className=\"col-md-3\">\n\t\t\t<div className=\"card\">\n\t\t\t\t<div className=\"card-image\">\n\t\t\t\t\t<img\n\t\t\t\t\t\tclassName=\"img-responsive\"\n\t\t\t\t\t\tsrc={`http://robohash.org/${props.monster.id}?set=set2&size=180x180`}\n\t\t\t\t\t\talt=\"monster\"\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"card-title text-center\">\n\t\t\t\t\t<h2>{props.monster.name}</h2>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"card-body text-center\">\n\t\t\t\t\t<p>{props.monster.email}</p>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n","import React from 'react';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Card } from '../card/card.component';\nimport './card-list.styles.css';\n\nexport const CardList = (props) => {\n\treturn (\n\t\t<div className=\"row mt-5\">\n\t\t\t{props.monsters.map((monster) => {\n\t\t\t\treturn <Card key={monster.id} monster={monster} />;\n\t\t\t})}\n\t\t</div>\n\t);\n};\n","import React from 'react';\nimport { SearchBox } from './components/search-box/search-box.component';\nimport { CardList } from './components/card-list/card-list.component';\n\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nclass App extends React.Component {\n\n  constructor() {\n    super();\n    this.state = {\n      monsters: [],\n      searchField: ''\n    }\n\n    // this.handleChange = this.handleChange.bind(this);\n  }\n\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(users => { this.setState({ monsters: users }) });\n  }\n\n  handleChange = (e) => {\n    this.setState({ searchField: e.target.value });\n  }\n\n  handleElement = (e) => {\n    console.log(e.target.value);\n  }\n\n  render() {\n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter((monster) => {\n      return monster.name.toLowerCase().includes(searchField.toLowerCase());\n    });\n\n    return (\n      <div className=\"container bg-gradient\">\n        <h1 className=\"header text-center spooky fs-5rem\">\n          Monster Rolodex\n        </h1>\n        <div className=\"row my-3 justify-content-center\">\n          <div className=\"col-md-6\">\n            <SearchBox placeholder=\"Search Monster\"\n              handleChange={this.handleChange} />\n          </div>\n        </div>\n        <CardList monsters={filteredMonsters} />\n      </div >\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}